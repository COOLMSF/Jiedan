# ///////////////////////////////////////////////////////////////
#
# BY: WANDERSON M.PIMENTA
# PROJECT MADE WITH: Qt Designer and PySide6
# V: 1.0.0
#
# This project can be used freely for all uses, as long as they maintain the
# respective credits only in the Python scripts, any information in the visual
# interface (GUI) can be modified without any implication.
#
# There are limitations on Qt licenses if you want to use your products
# commercially, I recommend reading them on the official website:
# https://doc.qt.io/qtforpython/licenses.html
#
# ///////////////////////////////////////////////////////////////

import sys
import os
import platform
import json
import threading
import time

# IMPORT / GUI AND MODULES AND WIDGETS
# ///////////////////////////////////////////////////////////////

sys.path.append("/code")
sys.path.append("/modules")

from modules import *
from widgets import *
# from code import Alexnet,MyVGG16
from modules.ui_waiting_widget import Ui_Form
from code.CNN.model import Alexnet, MyVGG16
from code.virustotal.VT import virus_total_detect
from code.Utils.exec2img import Exec2img
from code.Utils.get_binary_info import GetBianryInfo
from PySide6 import QtCore

os.environ["QT_FONT_DPI"] = "96"  # FIX Problem for High DPI and Scale above 100%

# SET AS GLOBAL WIDGETS
# ///////////////////////////////////////////////////////////////
widgets = None

class WaitingWidget(Ui_Form, QWidget):
    def __init__(self, task):
        super(WaitingWidget, self).__init__()
        
        # 获取传过来的参数
        # task 必须提供关闭task的方法，kill_task()
        self.task = task
        self.waiting_spinner = QtWaitingSpinner(self)
        
        self.setupUi(self)
        self.init_ui()
        self.init_slot()
        
    def kill_task(self):
        result = QMessageBox.question(self, "正在运行", "有任务正在运行，确认要关闭吗？")
        if result == QMessageBox.y:
            self.task.kill_task()
        else:
            pass
        
    def init_ui(self):
        self.waiting_spinner.start()
        self.btn_ok.setDisabled(True)
        
    def init_slot(self):
        # 关闭此窗口
        self.btn_ok.clicked.connect(lambda x: self.close())
        # 关闭task, 该任务必须提供关闭的方法
        self.btn_cancel.clicked.connect(lambda x: self.task_kill_task())

class MainWindow(QMainWindow):
    def __init__(self):
        self.ui = None
        QMainWindow.__init__(self)
        # self.init_ui()
        # self.init_slot()

    # def init_ui(self):

        # SET AS GLOBAL WIDGETS
        # ///////////////////////////////////////////////////////////////
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        global widgets
        widgets = self.ui

        # USE CUSTOM TITLE BAR | USE AS "False" FOR MAC OR LINUX
        # ///////////////////////////////////////////////////////////////
        Settings.ENABLE_CUSTOM_TITLE_BAR = True

        # APP NAME
        # ///////////////////////////////////////////////////////////////
        title = "恶意代码检测"
        description = "恶意代码检测"
        # APPLY TEXTS
        self.setWindowTitle(title)
        widgets.titleRightInfo.setText(description)

        # SET UI DEFINITIONS
        # ///////////////////////////////////////////////////////////////
        UIFunctions.uiDefinitions(self)

        # QTableWidget PARAMETERS
        # ///////////////////////////////////////////////////////////////
        widgets.tableWidget_predict_program_analysis.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        widgets.tableWidget_train_result.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        # SHOW APP
        # ///////////////////////////////////////////////////////////////
        self.show()

        # SET CUSTOM THEME
        # ///////////////////////////////////////////////////////////////
        useCustomTheme = False
        themeFile = "themes\py_dracula_light.qss"

        # SET THEME AND HACKS
        if useCustomTheme:
            # LOAD AND APPLY STYLE
            UIFunctions.theme(self, themeFile, True)

            # SET HACKS
            AppFunctions.setThemeHack(self)

        # SET HOME PAGE AND SELECT MENU
        # ///////////////////////////////////////////////////////////////
        widgets.stackedWidget.setCurrentWidget(widgets.home)
        widgets.btn_home_stack_widget.setStyleSheet(UIFunctions.selectMenu(widgets.btn_home_stack_widget.styleSheet()))

    # def init_slot(self):
        # TOGGLE MENU
        # ///////////////////////////////////////////////////////////////
        widgets.toggleButton.clicked.connect(lambda: UIFunctions.toggleMenu(self, True))

        # LEFT MENUS
        widgets.btn_home_stack_widget.clicked.connect(self.buttonClick)
        widgets.btn_train_stack_widget.clicked.connect(self.buttonClick)
        widgets.btn_vt_stack_widget.clicked.connect(self.buttonClick)
        widgets.btn_predict_stack_widget.clicked.connect(self.buttonClick)

        # EXTRA LEFT BOX
        def openCloseLeftBox():
            UIFunctions.toggleLeftBox(self, True)

        widgets.toggleLeftBox.clicked.connect(openCloseLeftBox)
        widgets.extraCloseColumnBtn.clicked.connect(openCloseLeftBox)

        # EXTRA RIGHT BOX
        def openCloseRightBox():
            UIFunctions.toggleRightBox(self, True)

        widgets.settingsTopBtn.clicked.connect(openCloseRightBox)
        
        # page train
        self.ui.pushButton_train_open_dataset_dir.clicked.connect(
            lambda x: self.pushButton_train_open_dataset_dir_clicked()
        )
        
        self.ui.pushButton_train_save_model_dir.clicked.connect(
            lambda x: self.pushButton_train_save_model_dir_clicked()
        )
        
        self.ui.pushButton_train_starttrain.clicked.connect(
            lambda x: self.pushButton_train_starttrain_clicked()
        )

        # page predict
        self.ui.pushButton_predict_startpredict.clicked.connect(
            lambda x: self.pushButton_predict_startpredict_clicked()
        )
        self.ui.pushButton_predict_suspicious_file_upload.clicked.connect(
            lambda x: self.pushButton_predict_suspicious_file_upload_clicked()
        )
        self.ui.pushButton_predict_model_select.clicked.connect(
            lambda x: self.pushButton_predict_model_select_clicked()
        )
        
        # page vt
        self.ui.pushButton_vt_upload_suspicious_file.clicked.connect(
            lambda x: self.pushButton_vt_suspicious_file_upload_clicked()
        )
        self.ui.pushButton_vt_scan.clicked.connect(
            lambda x: self.pushButton_vt_scan_clicked()
        )

    def import_file(self) -> str:
        fdlg = QFileDialog()
        fdlg.setFileMode(QFileDialog.FileMode.AnyFile)

        if fdlg.exec():
            # 接受选中文件的路径，默认为列表
            filenames = fdlg.selectedFiles()
            # 列表中的第一个元素即是文件路径，以只读的方式打开文件
            return filenames[0]

    def import_dir(self) -> str:
        fdlg = QFileDialog()
        fdlg.setFileMode(QFileDialog.FileMode.Directory)

        if fdlg.exec():
            # 接受选中文件的路径，默认为列表
            filenames = fdlg.selectedFiles()
            # 列表中的第一个元素即是文件路径，以只读的方式打开文件
            return filenames[0]

    def pushButton_predict_startpredict_clicked(self):
        model = None

        suspicious_filename = self.ui.lineEdit_predict_suspicious_filename.text()
        selected_model_name = self.ui.comboBox_predict_selected_model.currentText()

        if selected_model_name == "AlexNet":
            model = Alexnet()
        if selected_model_name == "VGG16":
            model = MyVGG16()

        # img_path, result = model.predict(suspicious_filename)
        img_path, result = model.predict(suspicious_filename)
        pixmap = QPixmap(img_path)
        pixmap_resized = pixmap.scaled(1520, 1520, QtCore.Qt.KeepAspectRatio)
        pixmap_resized.save(img_path+"_resized", "PNG")
        self.ui.label_program_gray_scale_image.setPixmap(QPixmap(img_path+"_resized"))

        self.ui.lineEdit_predict_result.setText(selected_model_name + " predict result:" + result)

        binary_info = GetBianryInfo(suspicious_filename)

        # r2pipe output
        self.ui.tableWidget_predict_program_analysis.clear()
        # functions
        self.ui.tableWidget_predict_program_analysis.setItem(0, 0, QTableWidgetItem("functions"))
        a = binary_info.get_function()
        for idx, function in enumerate(binary_info.get_function().split('\n')):
            if len(function) < 3:
                self.ui.tableWidget_predict_program_analysis.setItem(idx+1, 0, QTableWidgetItem("NULL"))
            else:
                self.ui.tableWidget_predict_program_analysis.setItem(idx+1, 0, QTableWidgetItem(function))
                
            print(function)

        # sessions
        self.ui.tableWidget_predict_program_analysis.setItem(0, 1, QTableWidgetItem("sessions"))
        for idx, session in enumerate(binary_info.get_sessions().split('\n')):
            if len(session) < 3:
                self.ui.tableWidget_predict_program_analysis.setItem(idx+1, 1, QTableWidgetItem("NULL"))
            else:
                self.ui.tableWidget_predict_program_analysis.setItem(idx+1, 1, QTableWidgetItem(session))
                
            print(session, len(session))

        # strings
        self.ui.tableWidget_predict_program_analysis.setItem(0, 2, QTableWidgetItem("strings"))
        for idx, s in enumerate(binary_info.get_string().split('\n')):
            if len(s) < 3:
                self.ui.tableWidget_predict_program_analysis.setItem(idx+1, 2, QTableWidgetItem("NULL"))
            else:
                self.ui.tableWidget_predict_program_analysis.setItem(idx+1, 2, QTableWidgetItem(s))
                
            print(s)

    def pushButton_predict_model_select_clicked(self):
        model_filename = self.import_file()
        self.ui.lineEdit_predict_modelname.setText(model_filename)

        if self.ui.comboBox_predict_selected_model.currentText() == "AlexNet":
            try:
                model = Alexnet()
                model.load_specify_model(model_filename)
            except Exception as e:
                print(e)
                msgBox = QMessageBox()
                msgBox.setText("Load model failed")
                result = msgBox.exec()

        if self.ui.comboBox_predict_selected_model.currentText() == "VGG16":
            try:
                model = MyVGG16()
                model.load_specify_model(model_filename)
            except Exception as e:
                msgBox = QMessageBox()
                msgBox.warning("Load module failed")
                result = msgBox.exec()

        self.ui.pushButton_predict_startpredict.setEnabled(True)

    # pushButton triggered function
    def pushButton_predict_suspicious_file_upload_clicked(self):
        suspicious_filename = self.import_file()
        self.ui.lineEdit_predict_suspicious_filename.setText(suspicious_filename)

    def pushButton_train_open_dataset_dir_clicked(self):
        dirname = self.import_dir()

        if len(dirname) < 1 or not os.path.isdir(dirname):
            msgBox = QMessageBox()
            msgBox.setText("Invalid directory")
            # msgBox.buttonClicked.connect(msgButtonClick)

            returnValue = msgBox.exec()
            if returnValue == QMessageBox.StandardButton.Ok:
                self.ui.pushButton_train_starttrain.setEnabled(True)
                # print('OK clicked')
                pass

        self.ui.lineEdit_train_dataset_src_dir.setText(dirname)

    def pushButton_train_save_model_dir_clicked(self):
        model_name = self.import_dir()
        self.ui.lineEdit_train_save_model_dir.setText(model_name)

    def pushButton_train_starttrain_clicked(self):
        model = None
        if self.ui.comboBox_train_selected_model.currentText() == "AlexNet":
            model = Alexnet()
            self.ui.tableWidget_train_result.setItem(1, 0, QTableWidgetItem("Start to train Alexnet model"))

        if self.ui.comboBox_train_selected_model.currentText() == "VGG16":
            model = MyVGG16()
            self.ui.tableWidget_train_result.setItem(1, 0, QTableWidgetItem("Start to train VGG16 model"))

        save_path = self.ui.lineEdit_train_save_model_dir.text()
        data_path = self.ui.lineEdit_train_dataset_src_dir.text()
        waiting_waiting = WaitingWidget(self)
        waiting_waiting.show()
        # trainning_thread = threading.Thread(model.train(data_path, save_path))
        trainning_thread = threading.Thread(target=lambda x: time.sleep(10))

        print("Start trainning thread")
        trainning_thread.start()
        
    def pushButton_vt_suspicious_file_upload_clicked(self):
        suspicious_filename = self.import_file()
        self.ui.lineEdit_vt_suspicious_filename.setText(suspicious_filename)
        
    def pushButton_vt_scan_clicked(self):
        suspicious_filename = self.ui.lineEdit_vt_suspicious_filename.text()

        waiting_widget = WaitingWidget(self)
        waiting_widget.show()

        report_file = virus_total_detect(suspicious_filename)
        self.ui.webengineview_vt.load(QUrl.fromLocalFile(report_file))

    # BUTTONS CLICK
    # Post here your functions for clicked buttons
    # ///////////////////////////////////////////////////////////////
    def buttonClick(self):
        # GET BUTTON CLICKED
        btn = self.sender()
        btnName = btn.objectName()

        # SHOW HOME PAGE
        if btnName == "btn_home_stack_widget":
            widgets.stackedWidget.setCurrentWidget(widgets.home)
            # 回复其他没有选中的按钮
            UIFunctions.resetStyle(self, btnName)
            # 选中的时候按钮会有按下去的标记
            btn.setStyleSheet(UIFunctions.selectMenu(btn.styleSheet()))

        # SHOW WIDGETS PAGE
        if btnName == "btn_train_stack_widget":
            widgets.stackedWidget.setCurrentWidget(widgets.train)
            UIFunctions.resetStyle(self, btnName)
            btn.setStyleSheet(UIFunctions.selectMenu(btn.styleSheet()))

        if btnName == "btn_predict_stack_widget":
            widgets.stackedWidget.setCurrentWidget(widgets.predict)
            UIFunctions.resetStyle(self, btnName)
            btn.setStyleSheet(UIFunctions.selectMenu(btn.styleSheet()))

        # SHOW NEW PAGE
        if btnName == "btn_vt_stack_widget":
            widgets.stackedWidget.setCurrentWidget(widgets.vt)  # SET PAGE
            UIFunctions.resetStyle(self, btnName)  # RESET ANOTHERS BUTTONS SELECTED
            btn.setStyleSheet(UIFunctions.selectMenu(btn.styleSheet()))  # SELECT MENU

        # PRINT BTN NAME
        print(f'Button "{btnName}" pressed!')

    # RESIZE EVENTS
    # ///////////////////////////////////////////////////////////////
    def resizeEvent(self, event):
        # Update Size Grips
        UIFunctions.resize_grips(self)

    # MOUSE CLICK EVENTS
    # ///////////////////////////////////////////////////////////////
    def mousePressEvent(self, event):
        # SET DRAG POS WINDOW
        self.dragPos = event.globalPos()

        # PRINT MOUSE EVENTS
        if event.buttons() == Qt.LeftButton:
            print('Mouse click: LEFT CLICK')
        if event.buttons() == Qt.RightButton:
            print('Mouse click: RIGHT CLICK')

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setWindowIcon(QIcon("icon.ico"))
    window = MainWindow()
    sys.exit(app.exec_())
